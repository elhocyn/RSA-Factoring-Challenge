#!/usr/bin/python3

import sys
import random
import time

def is_prime(n, k=20):
    """
    Miller-Rabin primality test to check if a number is prime with high probability
    Args:
        n: The number to be tested for primality
        k: The number of iterations for the test (higher value increases accuracy)
    Returns:
        True if the number is prime with high probability, False otherwise
    """
    if n == 2 or n == 3:
        return True
    if n < 2 or n % 2 == 0:
        return False

    # Write n - 1 as 2^r * d
    d = n - 1
    r = 0
    while d % 2 == 0:
        d //= 2
        r += 1

    # Perform the Miller-Rabin test k times
    for _ in range(k):
        a = random.randint(2, n - 2)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False

    return True


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: rsa <file>")
        exit()

    input_file = sys.argv[1]

    try:
        with open(input_file, 'r') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print("File not found")
        exit()

    start_time = time.time()

    num = int(lines[0].strip())

    # Find prime factors by iterating up to sqrt(num)
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0 and is_prime(i) and is_prime(num // i):
            print(f"{num}={i}*{num // i}")
            break

        # Check if the time limit has been exceeded
        if time.time() - start_time > 5:
            print("Time limit exceeded")
            exit()
